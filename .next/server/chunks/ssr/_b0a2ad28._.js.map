{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/niloysaha/Documents/Documents%20-%20Niloy%E2%80%99s%20MacBook%20Air/Udemy%20Web%20dev%20proj/AI%20Study%20Companion/lib/actions/companion.actions.ts"],"sourcesContent":["'use server';\n\nimport {auth} from \"@clerk/nextjs/server\";\nimport {createSupabaseClient} from \"@/lib/supabase\";\nimport { revalidatePath } from \"next/cache\";\n\nexport const createCompanion = async (formData: CreateCompanion) => {\n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        console.warn('Supabase environment variables not configured. Cannot create companion.');\n        return null;\n    }\n\n    const { userId: author } = await auth();\n    const supabase = createSupabaseClient();\n\n    const { data, error } = await supabase\n        .from('companions')\n        .insert({...formData, author })\n        .select();\n\n    if(error) {\n        console.error('Supabase error creating companion:', error.message);\n        return null;\n    }\n\n    if(!data) {\n        console.error('No data returned from companion creation');\n        return null;\n    }\n\n    return data[0];\n}\n\nexport const getAllCompanions = async ({ limit = 10, page = 1, subject, topic }: GetAllCompanions) => {\n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        console.warn('Supabase environment variables not configured. Returning empty array.');\n        return [];\n    }\n\n    const supabase = createSupabaseClient();\n\n    let query = supabase.from('companions').select();\n\n    if(subject && topic) {\n        query = query.ilike('subject', `%${subject}%`)\n            .or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\n    } else if(subject) {\n        query = query.ilike('subject', `%${subject}%`)\n    } else if(topic) {\n        query = query.or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\n    }\n\n    query = query.range((page - 1) * limit, page * limit - 1);\n\n    const { data: companions, error } = await query;\n\n    if(error) {\n        console.error('Supabase error:', error.message);\n        return [];\n    }\n\n    return companions || [];\n}\n\nexport const getCompanion = async (id: string) => {\n    const supabase = createSupabaseClient();\n\n    const { data, error } = await supabase\n        .from('companions')\n        .select()\n        .eq('id', id);\n\n    if(error) return console.log(error);\n\n    return data[0];\n}\n\nexport const addToSessionHistory = async (companionId: string) => {\n    const { userId } = await auth();\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase.from('session_history')\n        .insert({\n            companion_id: companionId,\n            user_id: userId,\n        })\n\n    if(error) throw new Error(error.message);\n\n    return data;\n}\n\nexport const getRecentSessions = async (limit = 10) => {\n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        console.warn('Supabase environment variables not configured. Returning empty array.');\n        return [];\n    }\n\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase\n        .from('session_history')\n        .select(`companions:companion_id (*)`)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n\n    if(error) {\n        console.error('Supabase error:', error.message);\n        return [];\n    }\n\n    return data?.map(({ companions }) => companions) || [];\n}\n\nexport const getUserSessions = async (userId: string, limit = 10) => {\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase\n        .from('session_history')\n        .select(`companions:companion_id (*)`)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n\n    if(error) throw new Error(error.message);\n\n    return data.map(({ companions }) => companions);\n}\n\nexport const getUserCompanions = async (userId: string) => {\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase\n        .from('companions')\n        .select()\n        .eq('author', userId)\n\n    if(error) throw new Error(error.message);\n\n    return data;\n}\n\nexport const newCompanionPermissions = async () => {\n    const { userId, has } = await auth();\n    \n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        // If no database configured, allow unlimited companions for now\n        return true;\n    }\n\n    const supabase = createSupabaseClient();\n    let limit = 10; // Default limit for free users\n\n    if(has({ plan: 'pro' })) {\n        return true;\n    } else if(has({ feature: \"3_companion_limit\" })) {\n        limit = 3;\n    } else if(has({ feature: \"10_companion_limit\" })) {\n        limit = 10;\n    }\n\n    const { data, error } = await supabase\n        .from('companions')\n        .select('id', { count: 'exact' })\n        .eq('author', userId)\n\n    if(error) {\n        console.error('Supabase error:', error.message);\n        return true; // Allow creation if database error\n    }\n\n    const companionCount = data?.length || 0;\n\n    if(companionCount >= limit) {\n        return false\n    } else {\n        return true;\n    }\n}\n\n// Bookmarks\nexport const addBookmark = async (companionId: string, path: string) => {\n  const { userId } = await auth();\n  if (!userId) return;\n  const supabase = createSupabaseClient();\n  const { data, error } = await supabase.from(\"bookmarks\").insert({\n    companion_id: companionId,\n    user_id: userId,\n  });\n  if (error) {\n    throw new Error(error.message);\n  }\n  // Revalidate the path to force a re-render of the page\n\n  revalidatePath(path);\n  return data;\n};\n\nexport const removeBookmark = async (companionId: string, path: string) => {\n  const { userId } = await auth();\n  if (!userId) return;\n  const supabase = createSupabaseClient();\n  const { data, error } = await supabase\n    .from(\"bookmarks\")\n    .delete()\n    .eq(\"companion_id\", companionId)\n    .eq(\"user_id\", userId);\n  if (error) {\n    throw new Error(error.message);\n  }\n  revalidatePath(path);\n  return data;\n};\n\n// It's almost the same as getUserCompanions, but it's for the bookmarked companions\nexport const getBookmarkedCompanions = async (userId: string) => {\n  const supabase = createSupabaseClient();\n  const { data, error } = await supabase\n    .from(\"bookmarks\")\n    .select(`companions:companion_id (*)`) // Notice the (*) to get all the companion data\n    .eq(\"user_id\", userId);\n  if (error) {\n    throw new Error(error.message);\n  }\n  // We don't need the bookmarks data, so we return only the companions\n  return data.map(({ companions }) => companions);\n};"],"names":[],"mappings":";;;;;;;IAsMa,iBAAA,WAAA,GAAA,IAAA,8WAAA,EAAA,8CAAA,mWAAA,EAAA,KAAA,GAAA,yWAAA,EAAA","debugId":null}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///Users/niloysaha/Documents/Documents%20-%20Niloy%E2%80%99s%20MacBook%20Air/Udemy%20Web%20dev%20proj/AI%20Study%20Companion/lib/actions/companion.actions.ts"],"sourcesContent":["'use server';\n\nimport {auth} from \"@clerk/nextjs/server\";\nimport {createSupabaseClient} from \"@/lib/supabase\";\nimport { revalidatePath } from \"next/cache\";\n\nexport const createCompanion = async (formData: CreateCompanion) => {\n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        console.warn('Supabase environment variables not configured. Cannot create companion.');\n        return null;\n    }\n\n    const { userId: author } = await auth();\n    const supabase = createSupabaseClient();\n\n    const { data, error } = await supabase\n        .from('companions')\n        .insert({...formData, author })\n        .select();\n\n    if(error) {\n        console.error('Supabase error creating companion:', error.message);\n        return null;\n    }\n\n    if(!data) {\n        console.error('No data returned from companion creation');\n        return null;\n    }\n\n    return data[0];\n}\n\nexport const getAllCompanions = async ({ limit = 10, page = 1, subject, topic }: GetAllCompanions) => {\n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        console.warn('Supabase environment variables not configured. Returning empty array.');\n        return [];\n    }\n\n    const supabase = createSupabaseClient();\n\n    let query = supabase.from('companions').select();\n\n    if(subject && topic) {\n        query = query.ilike('subject', `%${subject}%`)\n            .or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\n    } else if(subject) {\n        query = query.ilike('subject', `%${subject}%`)\n    } else if(topic) {\n        query = query.or(`topic.ilike.%${topic}%,name.ilike.%${topic}%`)\n    }\n\n    query = query.range((page - 1) * limit, page * limit - 1);\n\n    const { data: companions, error } = await query;\n\n    if(error) {\n        console.error('Supabase error:', error.message);\n        return [];\n    }\n\n    return companions || [];\n}\n\nexport const getCompanion = async (id: string) => {\n    const supabase = createSupabaseClient();\n\n    const { data, error } = await supabase\n        .from('companions')\n        .select()\n        .eq('id', id);\n\n    if(error) return console.log(error);\n\n    return data[0];\n}\n\nexport const addToSessionHistory = async (companionId: string) => {\n    const { userId } = await auth();\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase.from('session_history')\n        .insert({\n            companion_id: companionId,\n            user_id: userId,\n        })\n\n    if(error) throw new Error(error.message);\n\n    return data;\n}\n\nexport const getRecentSessions = async (limit = 10) => {\n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        console.warn('Supabase environment variables not configured. Returning empty array.');\n        return [];\n    }\n\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase\n        .from('session_history')\n        .select(`companions:companion_id (*)`)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n\n    if(error) {\n        console.error('Supabase error:', error.message);\n        return [];\n    }\n\n    return data?.map(({ companions }) => companions) || [];\n}\n\nexport const getUserSessions = async (userId: string, limit = 10) => {\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase\n        .from('session_history')\n        .select(`companions:companion_id (*)`)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        .limit(limit)\n\n    if(error) throw new Error(error.message);\n\n    return data.map(({ companions }) => companions);\n}\n\nexport const getUserCompanions = async (userId: string) => {\n    const supabase = createSupabaseClient();\n    const { data, error } = await supabase\n        .from('companions')\n        .select()\n        .eq('author', userId)\n\n    if(error) throw new Error(error.message);\n\n    return data;\n}\n\nexport const newCompanionPermissions = async () => {\n    const { userId, has } = await auth();\n    \n    // Check if Supabase environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n        // If no database configured, allow unlimited companions for now\n        return true;\n    }\n\n    const supabase = createSupabaseClient();\n    let limit = 10; // Default limit for free users\n\n    if(has({ plan: 'pro' })) {\n        return true;\n    } else if(has({ feature: \"3_companion_limit\" })) {\n        limit = 3;\n    } else if(has({ feature: \"10_companion_limit\" })) {\n        limit = 10;\n    }\n\n    const { data, error } = await supabase\n        .from('companions')\n        .select('id', { count: 'exact' })\n        .eq('author', userId)\n\n    if(error) {\n        console.error('Supabase error:', error.message);\n        return true; // Allow creation if database error\n    }\n\n    const companionCount = data?.length || 0;\n\n    if(companionCount >= limit) {\n        return false\n    } else {\n        return true;\n    }\n}\n\n// Bookmarks\nexport const addBookmark = async (companionId: string, path: string) => {\n  const { userId } = await auth();\n  if (!userId) return;\n  const supabase = createSupabaseClient();\n  const { data, error } = await supabase.from(\"bookmarks\").insert({\n    companion_id: companionId,\n    user_id: userId,\n  });\n  if (error) {\n    throw new Error(error.message);\n  }\n  // Revalidate the path to force a re-render of the page\n\n  revalidatePath(path);\n  return data;\n};\n\nexport const removeBookmark = async (companionId: string, path: string) => {\n  const { userId } = await auth();\n  if (!userId) return;\n  const supabase = createSupabaseClient();\n  const { data, error } = await supabase\n    .from(\"bookmarks\")\n    .delete()\n    .eq(\"companion_id\", companionId)\n    .eq(\"user_id\", userId);\n  if (error) {\n    throw new Error(error.message);\n  }\n  revalidatePath(path);\n  return data;\n};\n\n// It's almost the same as getUserCompanions, but it's for the bookmarked companions\nexport const getBookmarkedCompanions = async (userId: string) => {\n  const supabase = createSupabaseClient();\n  const { data, error } = await supabase\n    .from(\"bookmarks\")\n    .select(`companions:companion_id (*)`) // Notice the (*) to get all the companion data\n    .eq(\"user_id\", userId);\n  if (error) {\n    throw new Error(error.message);\n  }\n  // We don't need the bookmarks data, so we return only the companions\n  return data.map(({ companions }) => companions);\n};"],"names":[],"mappings":";;;;;;;IAqLa,cAAA,WAAA,GAAA,IAAA,8WAAA,EAAA,8CAAA,mWAAA,EAAA,KAAA,GAAA,yWAAA,EAAA","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/niloysaha/Documents/Documents%20-%20Niloy%E2%80%99s%20MacBook%20Air/Udemy%20Web%20dev%20proj/AI%20Study%20Companion/components/CompanionCard.tsx"],"sourcesContent":["\"use client\";\nimport { removeBookmark } from \"@/lib/actions/companion.actions\";\nimport { addBookmark } from \"@/lib/actions/companion.actions\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\ninterface CompanionCardProps {\n  id: string;\n  name: string;\n  topic: string;\n  subject: string;\n  duration: number;\n  color: string;\n  bookmarked: boolean;\n}\n\nconst CompanionCard = ({\n  id,\n  name,\n  topic,\n  subject,\n  duration,\n  color,\n  bookmarked,\n}: CompanionCardProps) => {\n  const pathname = usePathname();\n  const handleBookmark = async () => {\n    if (bookmarked) {\n      await removeBookmark(id, pathname);\n    } else {\n      await addBookmark(id, pathname);\n    }\n  };\n  return (\n    <article className=\"companion-card\" style={{ backgroundColor: color }}>\n      <div className=\"flex justify-between items-center\">\n        <div className=\"subject-badge\">{subject}</div>\n        <button className=\"companion-bookmark\" onClick={handleBookmark}>\n          <Image\n            src={\n              bookmarked ? \"/icons/bookmark-filled.svg\" : \"/icons/bookmark.svg\"\n            }\n            alt=\"bookmark\"\n            width={12.5}\n            height={15}\n          />\n        </button>\n      </div>\n\n      <h2 className=\"text-2xl font-bold\">{name}</h2>\n      <p className=\"text-sm\">{topic}</p>\n      <div className=\"flex items-center gap-2\">\n        <Image\n          src=\"/icons/clock.svg\"\n          alt=\"duration\"\n          width={13.5}\n          height={13.5}\n        />\n        <p className=\"text-sm\">{duration} minutes</p>\n      </div>\n\n      <Link href={`/companions/${id}`} className=\"w-full\">\n        <button className=\"btn-primary w-full justify-center\">\n          Launch Lesson\n        </button>\n      </Link>\n    </article>\n  );\n};\n\nexport default CompanionCard;"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;AAiBA,MAAM,gBAAgB,CAAC,EACrB,EAAE,EACF,IAAI,EACJ,KAAK,EACL,OAAO,EACP,QAAQ,EACR,KAAK,EACL,UAAU,EACS;IACnB,MAAM,WAAW,IAAA,gRAAW;IAC5B,MAAM,iBAAiB;QACrB,IAAI,YAAY;YACd,MAAM,IAAA,wKAAc,EAAC,IAAI;QAC3B,OAAO;YACL,MAAM,IAAA,qKAAW,EAAC,IAAI;QACxB;IACF;IACA,qBACE,6WAAC;QAAQ,WAAU;QAAiB,OAAO;YAAE,iBAAiB;QAAM;;0BAClE,6WAAC;gBAAI,WAAU;;kCACb,6WAAC;wBAAI,WAAU;kCAAiB;;;;;;kCAChC,6WAAC;wBAAO,WAAU;wBAAqB,SAAS;kCAC9C,cAAA,6WAAC,uQAAK;4BACJ,KACE,aAAa,+BAA+B;4BAE9C,KAAI;4BACJ,OAAO;4BACP,QAAQ;;;;;;;;;;;;;;;;;0BAKd,6WAAC;gBAAG,WAAU;0BAAsB;;;;;;0BACpC,6WAAC;gBAAE,WAAU;0BAAW;;;;;;0BACxB,6WAAC;gBAAI,WAAU;;kCACb,6WAAC,uQAAK;wBACJ,KAAI;wBACJ,KAAI;wBACJ,OAAO;wBACP,QAAQ;;;;;;kCAEV,6WAAC;wBAAE,WAAU;;4BAAW;4BAAS;;;;;;;;;;;;;0BAGnC,6WAAC,sSAAI;gBAAC,MAAM,CAAC,YAAY,EAAE,IAAI;gBAAE,WAAU;0BACzC,cAAA,6WAAC;oBAAO,WAAU;8BAAoC;;;;;;;;;;;;;;;;;AAM9D;uCAEe","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/niloysaha/Documents/Documents%20-%20Niloy%E2%80%99s%20MacBook%20Air/Udemy%20Web%20dev%20proj/AI%20Study%20Companion/components/SearchInput.tsx"],"sourcesContent":["'use client';\n\nimport {usePathname, useRouter, useSearchParams} from \"next/navigation\";\nimport {useEffect, useState} from \"react\";\nimport Image from \"next/image\";\n\nconst formUrlQuery = ({ params, key, value }: { params: string; key: string; value: string }) => {\n  const searchParams = new URLSearchParams(params);\n  searchParams.set(key, value);\n  return `${window.location.pathname}?${searchParams.toString()}`;\n};\n\nconst removeKeysFromUrlQuery = ({ params, keysToRemove }: { params: string; keysToRemove: string[] }) => {\n  const searchParams = new URLSearchParams(params);\n  keysToRemove.forEach(key => searchParams.delete(key));\n  return `${window.location.pathname}?${searchParams.toString()}`;\n};\n\nconst SearchInput = () => {\n    const pathname = usePathname();\n    const router = useRouter();\n    const searchParams = useSearchParams();\n    const query = searchParams.get('topic') || '';\n\n    const [searchQuery, setSearchQuery] = useState('');\n\n    useEffect(() => {\n        const delayDebounceFn = setTimeout(() => {\n            if(searchQuery) {\n                const newUrl = formUrlQuery({\n                    params: searchParams.toString(),\n                    key: \"topic\",\n                    value: searchQuery,\n                });\n\n                router.push(newUrl, { scroll: false });\n            } else {\n                if(pathname === '/companions') {\n                    const newUrl = removeKeysFromUrlQuery({\n                        params: searchParams.toString(),\n                        keysToRemove: [\"topic\"],\n                    });\n\n                    router.push(newUrl, { scroll: false });\n                }\n            }\n        }, 500)\n    }, [searchQuery, router, searchParams, pathname]);\n\n    return (\n        <div className=\"relative border border-black rounded-lg items-center flex gap-2 px-2 py-1 h-fit\">\n            <Image src=\"/icons/search.svg\" alt=\"search\" width={15} height={15} />\n            <input\n                placeholder=\"Search companions...\"\n                className=\"outline-none\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n            />\n        </div>\n    )\n}\nexport default SearchInput"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM,eAAe,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAkD;IAC1F,MAAM,eAAe,IAAI,gBAAgB;IACzC,aAAa,GAAG,CAAC,KAAK;IACtB,OAAO,GAAG,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa,QAAQ,IAAI;AACjE;AAEA,MAAM,yBAAyB,CAAC,EAAE,MAAM,EAAE,YAAY,EAA8C;IAClG,MAAM,eAAe,IAAI,gBAAgB;IACzC,aAAa,OAAO,CAAC,CAAA,MAAO,aAAa,MAAM,CAAC;IAChD,OAAO,GAAG,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa,QAAQ,IAAI;AACjE;AAEA,MAAM,cAAc;IAChB,MAAM,WAAW,IAAA,gRAAW;IAC5B,MAAM,SAAS,IAAA,8QAAS;IACxB,MAAM,eAAe,IAAA,oRAAe;IACpC,MAAM,QAAQ,aAAa,GAAG,CAAC,YAAY;IAE3C,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,gVAAQ,EAAC;IAE/C,IAAA,iVAAS,EAAC;QACN,MAAM,kBAAkB,WAAW;YAC/B,IAAG,aAAa;gBACZ,MAAM,SAAS,aAAa;oBACxB,QAAQ,aAAa,QAAQ;oBAC7B,KAAK;oBACL,OAAO;gBACX;gBAEA,OAAO,IAAI,CAAC,QAAQ;oBAAE,QAAQ;gBAAM;YACxC,OAAO;gBACH,IAAG,aAAa,eAAe;oBAC3B,MAAM,SAAS,uBAAuB;wBAClC,QAAQ,aAAa,QAAQ;wBAC7B,cAAc;4BAAC;yBAAQ;oBAC3B;oBAEA,OAAO,IAAI,CAAC,QAAQ;wBAAE,QAAQ;oBAAM;gBACxC;YACJ;QACJ,GAAG;IACP,GAAG;QAAC;QAAa;QAAQ;QAAc;KAAS;IAEhD,qBACI,6WAAC;QAAI,WAAU;;0BACX,6WAAC,uQAAK;gBAAC,KAAI;gBAAoB,KAAI;gBAAS,OAAO;gBAAI,QAAQ;;;;;;0BAC/D,6WAAC;gBACG,aAAY;gBACZ,WAAU;gBACV,OAAO;gBACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;AAI9D;uCACe","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///Users/niloysaha/Documents/Documents%20-%20Niloy%E2%80%99s%20MacBook%20Air/Udemy%20Web%20dev%20proj/AI%20Study%20Companion/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;AAEA;AANA;;;;;AAQA,SAAS,OAAO,EACd,GAAG,OAC+C;IAClD,qBAAO,6WAAC,2XAAoB;QAAC,aAAU;QAAU,GAAG,KAAK;;;;;;AAC3D;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,6WAAC,4XAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,6WAAC,4XAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,OAAO,SAAS,EAChB,QAAQ,EACR,GAAG,OAGJ;IACC,qBACE,6WAAC,8XAAuB;QACtB,aAAU;QACV,aAAW;QACX,WAAW,IAAA,kHAAE,EACX,gzBACA;QAED,GAAG,KAAK;;YAER;0BACD,6WAAC,2XAAoB;gBAAC,OAAO;0BAC3B,cAAA,6WAAC,+TAAe;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAInC;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,QAAQ,EACR,WAAW,QAAQ,EACnB,GAAG,OACkD;IACrD,qBACE,6WAAC,6XAAsB;kBACrB,cAAA,6WAAC,8XAAuB;YACtB,aAAU;YACV,WAAW,IAAA,kHAAE,EACX,ijBACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,6WAAC;;;;;8BACD,6WAAC,+XAAwB;oBACvB,WAAW,IAAA,kHAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,6WAAC;;;;;;;;;;;;;;;;AAIT;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,6WAAC,4XAAqB;QACpB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAClB,SAAS,EACT,QAAQ,EACR,GAAG,OAC+C;IAClD,qBACE,6WAAC,2XAAoB;QACnB,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,6aACA;QAED,GAAG,KAAK;;0BAET,6WAAC;gBAAK,WAAU;0BACd,cAAA,6WAAC,oYAA6B;8BAC5B,cAAA,6WAAC,ySAAS;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAGzB,6WAAC,+XAAwB;0BAAE;;;;;;;;;;;;AAGjC;AAEA,SAAS,gBAAgB,EACvB,SAAS,EACT,GAAG,OACoD;IACvD,qBACE,6WAAC,gYAAyB;QACxB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iDAAiD;QAC9D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,qBAAqB,EAC5B,SAAS,EACT,GAAG,OACyD;IAC5D,qBACE,6WAAC,qYAA8B;QAC7B,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,6WAAC,yTAAa;YAAC,WAAU;;;;;;;;;;;AAG/B;AAEA,SAAS,uBAAuB,EAC9B,SAAS,EACT,GAAG,OAC2D;IAC9D,qBACE,6WAAC,uYAAgC;QAC/B,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,6WAAC,+TAAe;YAAC,WAAU;;;;;;;;;;;AAGjC","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///Users/niloysaha/Documents/Documents%20-%20Niloy%E2%80%99s%20MacBook%20Air/Udemy%20Web%20dev%20proj/AI%20Study%20Companion/components/SubjectFilter.tsx"],"sourcesContent":["\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from \"./ui/select\";\nimport { subjects } from \"@/constants\";\nimport { useRouter } from \"next/navigation\";\nimport { useSearchParams } from \"next/navigation\";\n\nconst formUrlQuery = ({ params, key, value }: { params: string; key: string; value: string }) => {\n  const searchParams = new URLSearchParams(params);\n  searchParams.set(key, value);\n  return `${window.location.pathname}?${searchParams.toString()}`;\n};\n\nconst removeKeysFromUrlQuery = ({ params, keysToRemove }: { params: string; keysToRemove: string[] }) => {\n  const searchParams = new URLSearchParams(params);\n  keysToRemove.forEach(key => searchParams.delete(key));\n  return `${window.location.pathname}?${searchParams.toString()}`;\n};\n\nconst SubjectFilter = () => {\n    const router = useRouter();\n    const searchParams = useSearchParams();\n    const query = searchParams.get(\"subject\") || \"\";\n\n    const [subject, setSubject] = useState(query);\n\n    useEffect(() => {\n        let newUrl = \"\";\n        if (subject === \"all\") {\n            newUrl = removeKeysFromUrlQuery({\n                params: searchParams.toString(),\n                keysToRemove: [\"subject\"],\n            });\n        } else {\n            newUrl = formUrlQuery({\n                params: searchParams.toString(),\n                key: \"subject\",\n                value: subject,\n            });\n        }\n        router.push(newUrl, { scroll: false });\n    }, [subject]);\n\n    return (\n        <Select onValueChange={setSubject} value={subject}>\n            <SelectTrigger className=\"input capitalize\">\n                <SelectValue placeholder=\"Subject\" />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectItem value=\"all\">All subjects</SelectItem>\n                {subjects.map((subject) => (\n                    <SelectItem key={subject} value={subject} className=\"capitalize\">\n                        {subject}\n                    </SelectItem>\n                ))}\n            </SelectContent>\n        </Select>\n    );\n};\n\nexport default SubjectFilter;"],"names":[],"mappings":";;;;;AACA;AACA;AAOA;AACA;AAVA;;;;;;;AAaA,MAAM,eAAe,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAkD;IAC1F,MAAM,eAAe,IAAI,gBAAgB;IACzC,aAAa,GAAG,CAAC,KAAK;IACtB,OAAO,GAAG,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa,QAAQ,IAAI;AACjE;AAEA,MAAM,yBAAyB,CAAC,EAAE,MAAM,EAAE,YAAY,EAA8C;IAClG,MAAM,eAAe,IAAI,gBAAgB;IACzC,aAAa,OAAO,CAAC,CAAA,MAAO,aAAa,MAAM,CAAC;IAChD,OAAO,GAAG,OAAO,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa,QAAQ,IAAI;AACjE;AAEA,MAAM,gBAAgB;IAClB,MAAM,SAAS,IAAA,8QAAS;IACxB,MAAM,eAAe,IAAA,oRAAe;IACpC,MAAM,QAAQ,aAAa,GAAG,CAAC,cAAc;IAE7C,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,gVAAQ,EAAC;IAEvC,IAAA,iVAAS,EAAC;QACN,IAAI,SAAS;QACb,IAAI,YAAY,OAAO;YACnB,SAAS,uBAAuB;gBAC5B,QAAQ,aAAa,QAAQ;gBAC7B,cAAc;oBAAC;iBAAU;YAC7B;QACJ,OAAO;YACH,SAAS,aAAa;gBAClB,QAAQ,aAAa,QAAQ;gBAC7B,KAAK;gBACL,OAAO;YACX;QACJ;QACA,OAAO,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAM;IACxC,GAAG;QAAC;KAAQ;IAEZ,qBACI,6WAAC,qIAAM;QAAC,eAAe;QAAY,OAAO;;0BACtC,6WAAC,4IAAa;gBAAC,WAAU;0BACrB,cAAA,6WAAC,0IAAW;oBAAC,aAAY;;;;;;;;;;;0BAE7B,6WAAC,4IAAa;;kCACV,6WAAC,yIAAU;wBAAC,OAAM;kCAAM;;;;;;oBACvB,8HAAQ,CAAC,GAAG,CAAC,CAAC,wBACX,6WAAC,yIAAU;4BAAe,OAAO;4BAAS,WAAU;sCAC/C;2BADY;;;;;;;;;;;;;;;;;AAOrC;uCAEe","debugId":null}}]
}